//
//  LocationViewController.m
//  Portland Pinball Map
//
//  Created by Karri on 11/12/09.
//  Copyright 2009 __MyCompanyName__. All rights reserved.
//

#import "LocationViewController.h"


@implementation LocationViewController
@synthesize names;
@synthesize keys;
@synthesize neighborhoods;
@synthesize tempNeighborhood;
@synthesize regionNames;
@synthesize currentNeighborhood;

- (void)viewDidLoad {
	NSString *path = [[NSBundle mainBundle] pathForResource:@"Locations" ofType:@"plist"];
	NSDictionary *dict = [[NSDictionary alloc] initWithContentsOfFile:path];
	self.names = dict;
	
	
	NSArray *array = [[names allKeys] sortedArrayUsingSelector:@selector(compare:)];
	self.keys = array;
	
	
    [super viewDidLoad];
	
	//http://isaacruiz.net/ppm/get_neighborhoods.php;
}



- (void)viewWillAppear:(BOOL)animated
{
	[super viewWillAppear:animated];
	if ([neighborhoods count] == 0)
	{
		NSString * path = @"http://isaacruiz.net/ppm/get_neighborhoods.php";
		regionNames = [[NSMutableArray alloc] init];
		neighborhoods = [[NSMutableArray alloc] init];
		[self parseXMLFileAtURL:path];
	}
	
}



/*
 - (void)viewDidAppear:(BOOL)animated {
 [super viewDidAppear:animated];
 }
 */
/*
 - (void)viewWillDisappear:(BOOL)animated {
 [super viewWillDisappear:animated];
 }
 */
/*
 - (void)viewDidDisappear:(BOOL)animated {
 [super viewDidDisappear:animated];
 }
 */

/*
 // Override to allow orientations other than the default portrait orientation.
 - (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation {
 // Return YES for supported orientations.
 return (interfaceOrientation == UIInterfaceOrientationPortrait);
 }
 */

- (void)didReceiveMemoryWarning {
	// Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
	
	// Release any cached data, images, etc that aren't in use.
}

- (void)viewDidUnload {
	self.names = nil;
	self.keys = nil;
	self.neighborhoods = nil;
	self.regionNames = nil;
}

- (void)dealloc {
	[neighborhoods release];
	[tempNeighborhood release];
	[currentNeighborhood release];
	[regionNames release];
	[names release];
	[keys release];
    [super dealloc];
}


#pragma mark Table view methods

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return [regionNames count];
}


// Customize the number of rows in the table view.
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
  
	return [[neighborhoods objectAtIndex:section] count];
}


// Customize the appearance of table view cells.

 - (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    
	NSUInteger section = [indexPath section];
	NSUInteger row = [indexPath row];
	
	
	/*static NSString *CellIdentifier = @"SingleTextID";
    PPMTableCell *cell = (PPMTableCell*)[tableView dequeueReusableCellWithIdentifier:CellIdentifier];
  
	if (cell == nil)
	{
		cell = [self getTableCell];
		cell.imageView.hidden = YES;
	}
	
	cell.nameLabel.text = [[neighborhoods objectAtIndex:section] objectAtIndex:row];
	 
	 */
	
	
	 static NSString *CellIdentifier = @"Cell";
	 
	 UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
	 if (cell == nil) {
		 cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier] autorelease];
		 cell.backgroundView.backgroundColor = [UIColor darkGrayColor];
	 }
	 
	 cell.textLabel.text = [[neighborhoods objectAtIndex:section] objectAtIndex:row];
	return cell;
}


- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section;
{
	NSString *sectionTitle = [self tableView:tableView titleForHeaderInSection:section];
	
	UILabel *label = [[[UILabel alloc] init] autorelease];
	label.frame = CGRectMake(20, 0, 320, 22);
	label.backgroundColor = [UIColor blackColor];
	label.textColor = [UIColor whiteColor];
	label.font = [UIFont boldSystemFontOfSize:18];
	label.text = sectionTitle;
	
	// Create header view and add label as a subview
	UIView *view = [[UIView alloc] initWithFrame:CGRectMake(20, 0, 320, 22)];
	view.backgroundColor = [UIColor blackColor];
	[view autorelease];
	[view addSubview:label];
	return view;	
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section
{
	return 30;
}



// Override to support row selection in the table view.
- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
	
    // Navigation logic may go here -- for example, create and push another view controller.
	// AnotherViewController *anotherViewController = [[AnotherViewController alloc] initWithNibName:@"AnotherView" bundle:nil];
	// [self.navigationController pushViewController:anotherViewController animated:YES];
	// [anotherViewController release];
}

-(NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger) section
{
	NSString *key = [regionNames objectAtIndex:section];
	return key;
}
	
-(NSArray *)sectionIndexTitlesForTableView:(UITableView *)tableView
{
	return keys;
}

# pragma mark -
# pragma mark XML Parsing

- (void)parser:(NSXMLParser *)parser didStartElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName attributes:(NSDictionary *)attributeDict{
	//NSLog(@"found this element: %@", elementName);
	//NSLog(@"atts: %@",[attributeDict objectForKey:@"name"]);
	currentElement = [elementName copy];
	
	
	if ([elementName isEqualToString:@"region"]) 
	{
		//Get Region Name
		//NSLog(@"atts: %@",[attributeDict objectForKey:@"name"]);
		[regionNames addObject:[attributeDict objectForKey:@"name"]];
		
		tempNeighborhood = [[NSMutableArray alloc] init];
	}
	
	if([elementName isEqualToString:@"neighborhood"])
	{
		currentNeighborhood = [[NSMutableString alloc] init];
	}
	//
	 // clear out our story item caches...
	 //item = [[NSMutableDictionary alloc] init];
	 //currentTitle = [[NSMutableString alloc] init];
	 //currentDate = [[NSMutableString alloc] init];
	 //currentSummary = [[NSMutableString alloc] init];
	 //currentLink = [[NSMutableString alloc] init];
	
}

- (void)parser:(NSXMLParser *)parser didEndElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName{
	
	//NSLog(@"ended element: %@", elementName);
	currentElement = @"";
	if ([elementName isEqualToString:@"region"])
	{
		[neighborhoods addObject:tempNeighborhood];
	}
	
	if ([elementName isEqualToString:@"neighborhood"])
	{
		[tempNeighborhood addObject:currentNeighborhood];
	}
		// save values to an item, then store that item into the array...
		//[item setObject:currentTitle forKey:@"title"];
		//[item setObject:currentLink forKey:@"link"];
		//[item setObject:currentSummary forKey:@"summary"];
		//[item setObject:currentDate forKey:@"date"];
		
		
		//NSLog(@"adding story: %@", elementName);
}

- (void)parser:(NSXMLParser *)parser foundCharacters:(NSString *)string{
	//NSLog(@"found characters: %@", string,currentElement);
	
	if([currentElement isEqualToString:@"neighborhood"])
	{
		[currentNeighborhood appendString:string];
	}
	// save the characters for the current item...
	/*if ([currentElement isEqualToString:@"title"]) {
	 [currentTitle appendString:string];
	 } else if ([currentElement isEqualToString:@"link"]) {
	 [currentLink appendString:string];
	 } else if ([currentElement isEqualToString:@"description"]) {
	 [currentSummary appendString:string];
	 } else if ([currentElement isEqualToString:@"pubDate"]) {
	 [currentDate appendString:string];
	 }*/
}

- (void)parserDidEndDocument:(NSXMLParser *)parser {
	
	//[activityIndicator stopAnimating];
	//[activityIndicator removeFromSuperview];
	
	//NSLog(@"all done!");
	//NSLog(@"machines array has %d items", [regionNames count]);
	[self.tableView reloadData];
	[super parserDidEndDocument:parser];
}




/*
 // Override to support conditional editing of the table view.
 - (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath {
 // Return NO if you do not want the specified item to be editable.
 return YES;
 }
 */


/*
 // Override to support editing the table view.
 - (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath {
 
 if (editingStyle == UITableViewCellEditingStyleDelete) {
 // Delete the row from the data source.
 [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade];
 }   
 else if (editingStyle == UITableViewCellEditingStyleInsert) {
 // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view.
 }   
 }
 */


/*
 // Override to support rearranging the table view.
 - (void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)fromIndexPath toIndexPath:(NSIndexPath *)toIndexPath {
 }
 */


/*
 // Override to support conditional rearranging of the table view.
 - (BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath {
 // Return NO if you do not want the item to be re-orderable.
 return YES;
 }
 */


@end
